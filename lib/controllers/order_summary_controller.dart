import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:table_booking/helpers/pdf_helper.dart';
import 'package:table_booking/models/employee_model.dart';
import 'package:table_booking/models/order_detail_model.dart';
import 'package:table_booking/models/order_model.dart';
import 'package:table_booking/pages/table_page.dart';
class OrderSummaryController extends GetxController {
  final int orderId;
  List<OrderDetailModel> items = [];
  bool loading = false;
  String? error;

  OrderSummaryController(this.orderId);

  @override
  void onInit() {
    super.onInit();
    loadOrderDetails();
  }

  Future<void> loadOrderDetails() async {
    loading = true;
    update();
    try {
      items = await OrderDetailSnapshot.fetchByOrderId(orderId);
      error = null;
    } catch (e) {
      error = e.toString();
    } finally {
      loading = false;
      update();
    }
  }

  final OrderSnapshot _orderService = OrderSnapshot();
  Future<bool> handleCancel(int orderId) async {
    final success = await _orderService.cancelOrder(orderId);
    if (!success) {
      error = 'H·ªßy ƒë∆°n th·∫•t b·∫°i.';
    } else {
      error = null;
    }
    update(); // c·∫≠p nh·∫≠t UI
    return success;
  }

  Future<void> addDishesToOrder(List<OrderDetailModel> selectedItems) async {
    try {
      // üü° G·ªçi h√†m snapshot ƒë·ªÉ th√™m m√≥n m·ªõi
      final newItems = await OrderDetailSnapshot.addNewItemsOnly(orderId, selectedItems);

      if (newItems.isEmpty) {
        Get.snackbar("Kh√¥ng c√≥ m√≥n m·ªõi", "C√°c m√≥n ƒë√£ t·ªìn t·∫°i, kh√¥ng in l·∫°i");
        return;
      }

      // Truy v·∫•n th√¥ng tin b·ªï sung cho in h√≥a ƒë∆°n (table name, waiter name, order time)
      final order = await Supabase.instance.client
          .from('Order')
          .select()
          .eq('orderid', orderId)
          .single();

      final table = await Supabase.instance.client
          .from('TableRestaurant')
          .select('tablename')
          .eq('tableid', order['tableid']) // ho·∫∑c d√πng tableId n·∫øu b·∫°n c√≥ s·∫µn
          .single();

      final waiter = await Supabase.instance.client
          .from('Employee')
          .select('fullname')
          .eq('employeeid', order['waiterid'])
          .single();

      // üü° G·ªçi h√†m in
      await generateKitchenOrderPDF(
        orderId: orderId,
        tableName: table['tablename'],
        waiterName: waiter['fullname'],
        orderTime: DateTime.parse(order['ordertime']),
        details: newItems, // üî• ch·ªâ in m√≥n m·ªõi
      );

      Get.snackbar("Th√†nh c√¥ng", "ƒê√£ g·ª≠i ${newItems.length} m√≥n m·ªõi v√†o b·∫øp");
    } catch (e) {
      Get.snackbar("L·ªói", "Kh√¥ng th·ªÉ th√™m m√≥n m·ªõi: $e", backgroundColor: Colors.red, colorText: Colors.white);
    }
  }

  Future<void> printToKitchen(int orderId) async {
    try {
      // 1. L·∫•y order + table name t·ª´ snapshot
      final result = await OrderSnapshot.getOrderWithTableName(orderId);
      final order = result['order'] as OrderModel;
      final tableName = result['tableName'] as String;

      // 2. L·∫•y t√™n nh√¢n vi√™n
      final waiterName = await EmployeeSnapshot.getWaiterName(order.waiterId);

      // 3. L·∫•y chi ti·∫øt m√≥n ƒÉn
      final details = await OrderDetailSnapshot.fetchByOrderId(orderId);

      // 4. In PDF cho b·∫øp
      await generateKitchenOrderPDF(
        orderId: order.orderId,
        tableName: tableName,
        waiterName: waiterName,
        orderTime: order.orderTime,
        details: details,
      );

      // 5. Quay v·ªÅ trang ch√≠nh
      Get.offAll(() => TablePage());
      Get.snackbar("Th√†nh c√¥ng", "ƒê√£ g·ª≠i ƒë∆°n t·ªõi b·∫øp!", backgroundColor: Colors.green, colorText: Colors.white);
    } catch (e) {
      print('Kh√¥ng th·ªÉ in ƒë∆°n cho b·∫øp: $e');
    }
  }



  double get totalAmount => items.fold(0.0, (sum, od) => sum + od.unitprice * od.quantity);

  String get orderCode => 'ORD' + orderId.toString();
}
